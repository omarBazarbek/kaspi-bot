from datetime import datetime

def estimate_sales(data):
    if not data:
        return None

    all_reviews = data.get("all_reviews", 0)
    text_reviews = data.get("text_reviews", 0)
    price = data.get("price", 0)
    text_reviews_today = data.get("text_reviews_today", 0)
    text_reviews_week = data.get("text_reviews_week", 0)
    text_reviews_month = data.get("text_reviews_month", 0)
    review_dates = data.get("review_dates", [])

    p1 = 0.25
    p2 = 0.10

    estimate_by_all = all_reviews / p1 if all_reviews else 0
    estimate_by_text = text_reviews / p2 if text_reviews else 0
    total_sales = int((estimate_by_all + estimate_by_text) / 2)
    total_revenue = total_sales * price

    def calc_period_sales(text_period):
        return round(total_sales * (text_period / text_reviews)) if text_reviews else 0

    def get_range(value):
        if value == 0:
            return (0, 2)
        elif value <= 3:
            return (max(0, value - 1), value + 2)
        elif value <= 10:
            return (value - 2, value + 3)
        else:
            return (value - 8, value + 7)

    daily_sales = calc_period_sales(text_reviews_today)
    weekly_sales = calc_period_sales(text_reviews_week)
    monthly_sales = calc_period_sales(text_reviews_month)

    if weekly_sales >= monthly_sales:
        weekly_sales = max(1, monthly_sales - 1)
    if daily_sales >= weekly_sales:
        daily_sales = max(0, weekly_sales - 1)

    daily_range = get_range(daily_sales)
    weekly_range = get_range(weekly_sales)
    monthly_range = get_range(monthly_sales)

    today = datetime.today()
    last_review_date = max(review_dates) if review_dates else None

    if not last_review_date:
        status = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞"
    elif (today - last_review_date).days > 90:
        status = "üî¥ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ä–∞—è. –ü—Ä–æ–¥–∞–∂ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ"
    elif (today - last_review_date).days > 30:
        status = "üü° –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    else:
        status = "üü¢ –¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–Ω—ã–π. –ï—Å—Ç—å —Å–ø—Ä–æ—Å"

    return {
        "sales_estimate": total_sales,
        "revenue_estimate": total_revenue,
        "avg_sales_today": daily_sales,
        "avg_sales_week": weekly_sales,
        "avg_sales_month": monthly_sales,
        "daily_range": daily_range,
        "weekly_range": weekly_range,
        "monthly_range": monthly_range,
        "status": status,
        "last_review_date": last_review_date.strftime("%d.%m.%Y") if last_review_date else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "confidence": "üìä *–¢–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:* ~92‚Äì98% (—É—á—Ç–µ–Ω—ã –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã)"
    }
