import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from parser import parse_kaspi_product
from config import BOT_TOKEN, WEBHOOK_URL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/start"
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Kaspi, –∏ —è –ø–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ —Å–ø—Ä–æ—Å üìä")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    if "kaspi.kz" not in url:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Kaspi.kz.")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ Kaspi
    data = parse_kaspi_product(url)

    if not data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏ üò¢")
        return

    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞
    result = data.get("sales_analysis")
    if not result:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ üò¢")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    response = (
        f"üì¶ *{data.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}*\n"
        f"üî¢ ID —Ç–æ–≤–∞—Ä–∞: {data.get('product_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('price', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'):,} ‚Ç∏\n"
        f"‚≠ê –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {sum(data.get('ratings', {}).values())}\n"
        f"üí¨ –û—Ç–∑—ã–≤–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º: {data.get('text_reviews', 0)}\n"
        f"üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∑–≤—ë–∑–¥–∞–º:\n"
    )

    for rate in sorted(data.get('ratings', {}).keys(), reverse=True):
        response += f"  {rate}‚òÖ ‚Äî {data['ratings'].get(rate)} —à—Ç.\n"

    response += (
        f"\nüìÖ –û—Ç–∑—ã–≤—ã –ø–æ –¥–∞—Ç–∞–º:\n"
        f"  –°–µ–≥–æ–¥–Ω—è: {data.get('reviews_today', 0)}\n"
        f"  –ó–∞ –Ω–µ–¥–µ–ª—é: {data.get('reviews_week', 0)}\n"
        f"  –ó–∞ –º–µ—Å—è—Ü: {data.get('reviews_month', 0)}\n\n"
    )

    month_revenue = result.get('avg_sales_month', 0) * data.get('price', 0)
    all_time_revenue = result.get('revenue_estimate', 0)

    response += (
        f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂:\n"
        f"  ~ –ü—Ä–æ–¥–∞–∂–∏ –≤—Å–µ–≥–æ: {result.get('sales_estimate')} —à—Ç.\n"
        f"  ~ –í—ã—Ä—É—á–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {all_time_revenue:,.0f} ‚Ç∏\n\n"

        f"üìà –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏:\n"
        f"  ‚Ä¢ –í –¥–µ–Ω—å: {result.get('avg_sales_today', 0)} —à—Ç. "
        f"({result.get('daily_range', [0, 0])[0]}‚Äì{result.get('daily_range', [0, 0])[1]} —à—Ç.)\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {result.get('avg_sales_week', 0)} —à—Ç. "
        f"({result.get('weekly_range', [0, 0])[0]}‚Äì{result.get('weekly_range', [0, 0])[1]} —à—Ç.)\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {result.get('avg_sales_month', 0)} —à—Ç. "
        f"({result.get('monthly_range', [0, 0])[0]}‚Äì{result.get('monthly_range', [0, 0])[1]} —à—Ç.)\n\n"

        f"üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü: {month_revenue:,.0f} ‚Ç∏\n\n"

        f"üìå –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {result.get('status', '')}\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤: {result.get('last_review_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"{result.get('confidence', '')}"
    ).replace(",", " ")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(response, parse_mode="Markdown")


# –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞–∫)
class HelloHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Kaspi Parser Bot is running!')


# –ó–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
def run_web_server():
    port = int(os.environ.get("PORT", 10000))  # Render –æ–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    server = HTTPServer(("", port), HelloHandler)
    server.serve_forever()


# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_web_server, daemon=True).start()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook
async def set_webhook():
    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è webhook
    webhook_url = WEBHOOK_URL + "/" + BOT_TOKEN
    await app.bot.set_webhook(webhook_url)


# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
app = ApplicationBuilder().token(BOT_TOKEN).build()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
import asyncio
asyncio.run(set_webhook())

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Webhook ‚úÖ")
